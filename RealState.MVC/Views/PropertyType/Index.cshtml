@model PropertyTypeIndexViewModel
@{
    ViewData["Title"] = "Property Types";
}

<h1>Property Types</h1>

<form asp-action="Index" method="get" id="searchForm" class="mb-4">
    <div class="form-group">
        <label asp-for="Filters.Name">Search by Name:</label>
        <input asp-for="Filters.Name" class="form-control" id="nameSearch" />
        <span class="text-danger" id="nameSearchError"></span>
    </div>
    <button type="submit" class="btn btn-primary mt-2">Search</button>
</form>

<table class="table table-striped table-hover">
    <thead>
        <tr>
            <th>Name</th>
            <th>Description</th>
            <th>Number of Properties</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody id="propertyTypeTable">
    </tbody>
</table>

<nav aria-label="Property type pagination" class="mt-4">
    <ul class="pagination" id="pagination"></ul>
</nav>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-labelledby="deleteConfirmModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteConfirmModalLabel">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this property type?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <a href="#" id="confirmDeleteButton" class="btn btn-danger">Delete</a>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.getElementById('searchForm').addEventListener('submit', function (e) {
            var nameInput = document.getElementById('nameSearch');
            var nameError = document.getElementById('nameSearchError');
            
            // Clear previous error
            nameError.textContent = '';
            
            // Validate name input
            if (nameInput.value.trim().length > 50) {
                e.preventDefault();
                nameError.textContent = 'Name search must be 50 characters or less.';
            }
        });

        // Client-side pagination
        const itemsPerPage = 10;
        const propertyTypes = @Html.Raw(Json.Serialize(Model.Result));
        let currentPage = 1;

        function renderPropertyTypes(page) {
            const startIndex = (page - 1) * itemsPerPage;
            const paginatedItems = propertyTypes.slice(startIndex, startIndex + itemsPerPage);

            const tableBody = document.getElementById('propertyTypeTable');
            tableBody.innerHTML = '';

            paginatedItems.forEach(item => {
                const row = `
                    <tr>
                        <td>${item.name}</td>
                        <td>${item.description}</td>
                        <td>${item.numberOfProperties}</td>
                        <td>
                            <a href="/PropertyType/Edit/${item.id}" class="btn btn-primary btn-sm">Edit</a>
                            <button class="btn btn-danger btn-sm" onclick="showDeleteConfirmation(${item.id})">Delete</button>
                        </td>
                    </tr>
                `;
                tableBody.innerHTML += row;
            });

            renderPagination();
        }

        function renderPagination() {
            const pageCount = Math.ceil(propertyTypes.length / itemsPerPage);
            const paginationElement = document.getElementById('pagination');
            paginationElement.innerHTML = '';

            for (let i = 1; i <= pageCount; i++) {
                const li = document.createElement('li');
                li.classList.add('page-item');
                if (i === currentPage) {
                    li.classList.add('active');
                }
                const a = document.createElement('a');
                a.classList.add('page-link');
                a.href = '#';
                a.textContent = i;
                a.addEventListener('click', (e) => {
                    e.preventDefault();
                    currentPage = i;
                    renderPropertyTypes(currentPage);
                });
                li.appendChild(a);
                paginationElement.appendChild(li);
            }
        }

        // Delete confirmation
        function showDeleteConfirmation(id) {
            const modal = new bootstrap.Modal(document.getElementById('deleteConfirmModal'));
            const confirmDeleteButton = document.getElementById('confirmDeleteButton');
            confirmDeleteButton.href = `/PropertyType/Delete/${id}`;
            modal.show();
        }

        // Initial render
        renderPropertyTypes(currentPage);
    </script>
}