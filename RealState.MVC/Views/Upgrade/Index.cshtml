@model UpgradesIndexViewModel
@{
    ViewData["Title"] = "Upgrades";
}

<h1>Upgrades</h1>

<form asp-action="Index" method="get" id="searchForm" class="mb-4">
    <div class="form-group">
        <label for="Name">Search by Name:</label>
        <input name="Name" class="form-control" id="nameSearch" />
        <span class="text-danger" id="nameSearchError"></span>
    </div>
    <button type="submit" class="btn btn-primary mt-2">Search</button>
    <a class="btn btn-success mt-2" asp-action="CreateEdit">
        New
    </a>
</form>

<table class="table table-striped table-hover">
    <thead>
        <tr>
            <th>Name</th>
            <th>Description</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody id="upgradesTable">
    </tbody>
</table>

<nav aria-label="Upgrades pagination" class="mt-4">
    <ul class="pagination" id="pagination"></ul>
</nav>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-labelledby="deleteConfirmModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteConfirmModalLabel">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this upgrade?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <a href="#" id="confirmDeleteButton" class="btn btn-danger">Delete</a>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.getElementById('searchForm').addEventListener('submit', function (e) {
            var nameInput = document.getElementById('nameSearch');
            var nameError = document.getElementById('nameSearchError');

            // Clear previous error
            nameError.textContent = '';

            // Validate name input
            if (nameInput.value.trim().length > 50) {
                e.preventDefault();
                nameError.textContent = 'Name search must be 50 characters or less.';
            }
        });

        // Client-side pagination
        const itemsPerPage = 10;
        const upgrades = @Html.Raw(Json.Serialize(Model.Result));
        let currentPage = 1;

        function render(page) {
            const startIndex = (page - 1) * itemsPerPage;
            const paginatedItems = upgrades.slice(startIndex, startIndex + itemsPerPage);

            const tableBody = document.getElementById('upgradesTable');
            tableBody.innerHTML = '';

            paginatedItems.forEach(item => {
                const row = `
                    <tr>
                        <td>${item.name}</td>
                        <td>${item.description}</td>
                        <td>
                            <a href="/Upgrade/CreateEdit/${item.id}" class="btn btn-primary btn-sm">Edit</a>
                            <button class="btn btn-danger btn-sm" onclick="showDeleteConfirmation('${item.id}')">Delete</button>
                        </td>
                    </tr>
                `;
                tableBody.innerHTML += row;
            });

            renderPagination();
        }

     function renderPagination() {
         const pageCount = Math.ceil(upgrades.length / itemsPerPage);
         const paginationElement = document.getElementById('pagination');
         paginationElement.innerHTML = '';

         const maxPagesToShow = 5;
         let startPage = currentPage - Math.floor(maxPagesToShow / 2);
         let endPage = currentPage + Math.floor(maxPagesToShow / 2);

         if (startPage < 1) {
             startPage = 1;
             endPage = Math.min(pageCount, maxPagesToShow);
        }

         if (endPage > pageCount) {
             endPage = pageCount;
             startPage = Math.max(1, pageCount - maxPagesToShow + 1);
        }

         if (startPage > 1) {
             const firstPageLi = document.createElement('li');
             firstPageLi.classList.add('page-item');
             const firstPageA = document.createElement('a');
             firstPageA.classList.add('page-link');
             firstPageA.href = '#';
             firstPageA.textContent = '1';
             firstPageA.addEventListener('click', (e) => {
                 e.preventDefault();
                 currentPage = 1;
                 render(currentPage);
        });
             firstPageLi.appendChild(firstPageA);
             paginationElement.appendChild(firstPageLi);

             if (startPage > 2) {
                 const dotsLi = document.createElement('li');
                 dotsLi.classList.add('page-item');
                 dotsLi.innerHTML = '<span class="page-link">...</span>';
                 paginationElement.appendChild(dotsLi);
        }
        }

         for (let i = startPage; i <= endPage; i++) {
             const li = document.createElement('li');
             li.classList.add('page-item');
             if (i === currentPage) {
                 li.classList.add('active');
        }
             const a = document.createElement('a');
             a.classList.add('page-link');
             a.href = '#';
             a.textContent = i;
             a.addEventListener('click', (e) => {
                 e.preventDefault();
                 currentPage = i;
                 render(currentPage);
        });
             li.appendChild(a);
             paginationElement.appendChild(li);
        }

         if (endPage < pageCount) {
             if (endPage < pageCount - 1) {
                 const dotsLi = document.createElement('li');
                 dotsLi.classList.add('page-item');
                 dotsLi.innerHTML = '<span class="page-link">...</span>';
                 paginationElement.appendChild(dotsLi);
        }

             const lastPageLi = document.createElement('li');
             lastPageLi.classList.add('page-item');
             const lastPageA = document.createElement('a');
             lastPageA.classList.add('page-link');
             lastPageA.href = '#';
             lastPageA.textContent = pageCount;
             lastPageA.addEventListener('click', (e) => {
                 e.preventDefault();
                 currentPage = pageCount;
                 render(currentPage);
        });
             lastPageLi.appendChild(lastPageA);
             paginationElement.appendChild(lastPageLi);
        }
        }

        // Delete confirmation
        function showDeleteConfirmation(id) {
            console.log(id);
            const modal = new bootstrap.Modal(document.getElementById('deleteConfirmModal'));
            const confirmDeleteButton = document.getElementById('confirmDeleteButton');
            confirmDeleteButton.href = `/Upgrades/Delete/${id}`;
            modal.show();
        }

        // Initial render
        render(currentPage);
    </script>
}