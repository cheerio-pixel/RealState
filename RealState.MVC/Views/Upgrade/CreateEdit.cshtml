@using RealState.Application.ViewModel.Upgrades

@model UpgradesSaveViewModel
@{
    ViewData["Title"] = Model.Id.HasValue ? "Edit Upgrade" : "Create Upgrade";
}

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            @Html.ValidationSummary(true)
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h2 class="mb-0">@ViewData["Title"]</h2>
                </div>
                <div class="card-body">
                    <form asp-action="CreateEdit" method="post">
                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                        
                        @if (Model.Id.HasValue)
                        {
                            <input type="hidden" asp-for="Id" />
                        }
                        
                        <div class="mb-3">
                            <label asp-for="Name" class="form-label"></label>
                            <input asp-for="Name" class="form-control" />
                            <span asp-validation-for="Name" class="text-danger"></span>
                        </div>
                        
                        <div class="mb-3">
                            <label asp-for="Description" class="form-label"></label>
                            <textarea asp-for="Description" class="form-control" rows="3"></textarea>
                            <span asp-validation-for="Description" class="text-danger"></span>
                        </div>
                        
                        <div class="d-flex justify-content-between">
                            <button type="submit" class="btn btn-primary">
                                @(Model.Id.HasValue ? "Save Changes" : "Create")
                            </button>
                            <a asp-action="Index" class="btn btn-secondary">Cancel</a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script>
        // Custom client-side validation
        $(document).ready(function () {
            $('form').submit(function (event) {
                var nameInput = $('#Name');
                var descriptionInput = $('#Description');
                var isValid = true;

                // Name validation
                if (nameInput.val().trim().length > 50) {
                    isValid = false;
                    $('span[data-valmsg-for="Name"]').text('The name cannot be longer than 50 characters.');
                }

                // Description validation
                if (descriptionInput.val().trim().length > 100) {
                    isValid = false;
                    $('span[data-valmsg-for="Description"]').text('The description cannot be longer than 100 characters.');
                }

                if (!isValid) {
                    event.preventDefault();
                }
            });
        });
    </script>
}